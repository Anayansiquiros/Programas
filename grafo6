import sys
import networkx as nx
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QPushButton,
    QVBoxLayout, QWidget
)
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas


class GrafoWidget(FigureCanvas):
 
    def __init__(self):
        self.fig, self.ax = plt.subplots(figsize=(5, 5))
        super().__init__(self.fig)
        self.ax.axis("off") 

    def generar_grafo(self):
    
        self.ax.clear()

        G = nx.Graph()
        G.add_nodes_from([0, 1, 2, 3, 4, 5])
        aristas = [(4, 0), (4, 1), (4, 2), (2, 3), (2, 5)]
        G.add_edges_from(aristas)

       
        posiciones = {
            0: (-0.8, 0.2),
            1: (-0.8, -0.8),
            4: (0, -0.3),
            2: (0.8, 0.1),
            3: (1.4, -0.6),
            5: (1.4, 0.8)
        }

        nx.draw(
            G, posiciones, with_labels=True,
            node_size=1000, node_color="white", edgecolors="black",
            font_size=14, font_weight="bold", ax=self.ax
        )

        self.ax.axis("off")

        self.ax.set_title("Grafo generado", fontsize=14, pad=15)
        self.draw()


class VentanaPrincipal(QMainWindow):
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Generador de Grafo (PyQt5)")
        self.setGeometry(200, 200, 600, 600)

        # Widget central
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # Botón para generar el grafo
        self.boton = QPushButton("Generar Grafo")
        self.boton.setStyleSheet("font-size: 16px; padding: 10px;")
        self.boton.clicked.connect(self.mostrar_grafo)

        # Canvas del grafo
        self.canvas = GrafoWidget()

        # Agregar al layout
        layout.addWidget(self.boton)
        layout.addWidget(self.canvas)
        self.setCentralWidget(widget)

    def mostrar_grafo(self):
        """Acción del botón."""
        self.canvas.generar_grafo()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    ventana = VentanaPrincipal()
    ventana.show()
    sys.exit(app.exec_())
